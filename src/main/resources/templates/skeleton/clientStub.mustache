{{#if stubList}}import ballerina/grpc;
import ballerina/io;
{{/if}}{{#stubList}}
public type {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Client client object {
    public grpc:Client grpcClient = new;

    new (grpc:ClientEndpointConfig config) {
        // initialize client endpoint.
        grpc:Client c = new;
        c.init(config);
        error? result = c.initStub("{{stubType}}", DESCRIPTOR_KEY, descriptorMap);
        if (result is error) {
            panic result;
        } else {
            self.grpcClient = result;
        }
    }

{{#blockingFunctions}}
    remote function {{methodName}} ({{#if inputType}}{{inputType}} req, {{/if}}grpc:Headers? headers = ()) returns ({{#if outputType}}({{outputType}}, grpc:Headers){{else}}grpc:Headers{{/if}}|error) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        grpc:Client ep = self.grpcClient;
        var payload = check ep->blockingExecute("{{methodId}}", req, headers = headers);
        grpc:Headers resHeaders = new;
        {{#if outputType}}any result = ();
        (result, resHeaders) = payload;
        return ({{#not_equal outputType "string"}}check {{/not_equal}}<{{outputType}}>result, resHeaders);{{else}}(_, resHeaders) = payload;
        return resHeaders;{{/if}}
    }
{{/blockingFunctions}}{{#nonBlockingFunctions}}
    remote function {{methodName}} ({{#if inputType}}{{inputType}} req, {{/if}}typedesc listener, grpc:Headers? headers = ()) returns (error?) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        grpc:Client ep = self.grpcClient;
        error? res =  ep->nonBlockingExecute("{{methodId}}", req, listener, headers = headers);
        return res;
    }
{{/nonBlockingFunctions}}{{#streamingFunctions}}
    remote function {{methodName}} (typedesc listener, grpc:Headers? headers = ()) returns (grpc:Client| error)  {
        grpc:Client ep = self.grpcClient;
        error? res =  ep->streamingExecute("{{methodId}}", listener, headers = headers);
        return res;
    }{{/streamingFunctions}}
};
{{/stubList}}{{#messageList}}
type {{messageName}} record {
    {{#fieldList}}{{fieldType}}{{fieldLabel}} {{fieldName}}{{#if defaultValue}} = {{defaultValue}}{{/if}};
    {{/fieldList}}{{#each oneofFieldMap as |value key|}}{{camelcase @key}} {{@key}};{{/each}}
};
{{#each oneofFieldMap}}
public type {{camelcase @key}} {{#each this}}{{this.messageName}}{{#unless @last}}|{{/unless}}{{/each}};
{{#each this}}
type {{this.messageName}} record {
    {{#this.fieldList}}{{fieldType}}{{fieldLabel}} {{fieldName}}{{#if defaultValue}} = {{defaultValue}}{{/if}};
    {{/this.fieldList}}
};
{{/each}}{{/each}}
{{#enumList}}public type {{messageName}} {{#fieldList}}"{{name}}"{{#unless @last}}|{{/unless}}{{/fieldList}};
{{#fieldList}}const public {{../messageName}} {{uppercase ../messageName}}_{{name}} = "{{name}}";
{{/fieldList}}
{{/enumList}}{{/messageList}}
{{#enumList}}public type {{messageName}} {{#fieldList}}"{{name}}"{{#unless @last}}|{{/unless}}{{/fieldList}};
{{#fieldList}}@final public {{../messageName}} {{uppercase ../messageName}}_{{name}} = "{{name}}";
{{/fieldList}}{{/enumList}}{{#if rootDescriptorKey}}
const string DESCRIPTOR_KEY = "{{rootDescriptorKey}}";
map descriptorMap = {
{{#each descriptors}}"{{descriptorKey}}":"{{descriptorData}}"{{#unless @last}},{{/unless}}
{{/each}}
};{{/if}}