public client class {{pascalcase methodName}}StreamingClient {
    private grpc:StreamingClient sClient;

    public function init(grpc:StreamingClient sClient) {
        self.sClient = sClient;
    }

    {{#if inputType}}isolated remote function send({{inputType}} message) returns grpc:Error? {
        {{#unless inputType}}Empty message = {};{{/unless}}
        return self.sClient->send(message);
    }{{/if}}

    isolated remote function receive() returns {{#if outputType}}{{outputType}}|grpc:Error{{else}}grpc:Error?{{/if}} {
        var payload = check self.sClient->receive();
        {{#if outputType}}{{#not_equal outputType "string"}}return <{{outputType}}>result;{{/not_equal}}{{#equals outputType "string"}}return result.toString();{{/equals}}{{/if}}
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.sClient->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.sClient->complete();
    }
}