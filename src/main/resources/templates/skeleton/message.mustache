public type {{messageName}} record {|
    {{#fieldList}}{{fieldType}}{{#isNull defaultValue}}?{{/isNull}}{{fieldLabel}} {{{fieldName}}}{{#isNull defaultValue}} = (){{/isNull}}{{#isNotNull defaultValue}} = {{#equals fieldType "string"}}{{#if fieldLabel}}{{defaultValue}}{{else}}"{{defaultValue}}"{{/if}}{{/equals}}{{#not_equal fieldType "string"}}{{defaultValue}}{{/not_equal}}{{/isNotNull}};
    {{/fieldList ~}}
    {{#mapList}}record {| {{fieldList.0.fieldType}} key; {{fieldList.1.fieldType}} value; |}[] {{messageName}} = [];{{/mapList ~}}
    {{#each oneofFieldMap as |value key|}}{{#each @value}}{{{fieldType}}}{{#isNull defaultValue}}{{/isNull}} {{{fieldName}}}?;
    {{/each ~}}
{{/each}}
|};
{{#if oneofFieldMap}}
function isValid{{camelcase messageName}}({{messageName}} r) returns boolean {
{{#each oneofFieldMap as |value key|}}    int {{@key}}Count = 0;
    {{#each @value}}if !(r?.{{{fieldName}}} is ()) {
        {{@key}}Count += 1;
    }
    {{/each}}
{{/each}}    if ({{#each oneofFieldMap as |value key|}}{{#unless @first}}|| {{/unless}}{{@key}}Count > 1 {{/each}}) {
        return false;
    }
    return true;
}
{{#each oneofFieldMap}}{{#each this}}
function set{{messageName}}_{{{camelcase fieldName}}}({{messageName}} r, {{{fieldType}}} {{{fieldName}}}) {
    r.{{{fieldName}}} = {{{fieldName}}};
    {{#each ../this}}{{#not_equal fieldName ../fieldName}}r.remove("{{fieldName}}");
    {{/not_equal}}{{/each}}
}{{/each}}
{{/each}}
{{/if}}{{#enumList}}
{{> enum}}{{/enumList}}{{#if this.nestedMessageList}}{{#each this.nestedMessageList}}
{{> message}}{{/each}}{{/if}}